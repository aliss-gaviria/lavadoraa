// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/23/2024 14:53:12"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    lavadora
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lavadora_vlg_sample_tst(
	cerrado,
	encendida,
	lleno,
	reloj,
	reset,
	sampler_tx
);
input  cerrado;
input  encendida;
input  lleno;
input  reloj;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(cerrado or encendida or lleno or reloj or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module lavadora_vlg_check_tst (
	alarma,
	giro_bcd,
	llenado,
	tiempo_faltante1,
	tiempo_faltante2,
	vaciado,
	velocidad_bcd,
	sampler_rx
);
input  alarma;
input [6:0] giro_bcd;
input  llenado;
input [6:0] tiempo_faltante1;
input [6:0] tiempo_faltante2;
input  vaciado;
input [6:0] velocidad_bcd;
input sampler_rx;

reg  alarma_expected;
reg [6:0] giro_bcd_expected;
reg  llenado_expected;
reg [6:0] tiempo_faltante1_expected;
reg [6:0] tiempo_faltante2_expected;
reg  vaciado_expected;
reg [6:0] velocidad_bcd_expected;

reg  alarma_prev;
reg [6:0] giro_bcd_prev;
reg  llenado_prev;
reg [6:0] tiempo_faltante1_prev;
reg [6:0] tiempo_faltante2_prev;
reg  vaciado_prev;
reg [6:0] velocidad_bcd_prev;

reg  alarma_expected_prev;
reg [6:0] giro_bcd_expected_prev;
reg  llenado_expected_prev;
reg [6:0] tiempo_faltante1_expected_prev;
reg [6:0] tiempo_faltante2_expected_prev;
reg  vaciado_expected_prev;
reg [6:0] velocidad_bcd_expected_prev;

reg  last_alarma_exp;
reg [6:0] last_giro_bcd_exp;
reg  last_llenado_exp;
reg [6:0] last_tiempo_faltante1_exp;
reg [6:0] last_tiempo_faltante2_exp;
reg  last_vaciado_exp;
reg [6:0] last_velocidad_bcd_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	alarma_prev = alarma;
	giro_bcd_prev = giro_bcd;
	llenado_prev = llenado;
	tiempo_faltante1_prev = tiempo_faltante1;
	tiempo_faltante2_prev = tiempo_faltante2;
	vaciado_prev = vaciado;
	velocidad_bcd_prev = velocidad_bcd;
end

// update expected /o prevs

always @(trigger)
begin
	alarma_expected_prev = alarma_expected;
	giro_bcd_expected_prev = giro_bcd_expected;
	llenado_expected_prev = llenado_expected;
	tiempo_faltante1_expected_prev = tiempo_faltante1_expected;
	tiempo_faltante2_expected_prev = tiempo_faltante2_expected;
	vaciado_expected_prev = vaciado_expected;
	velocidad_bcd_expected_prev = velocidad_bcd_expected;
end



// expected alarma
initial
begin
	alarma_expected = 1'bX;
end 
// expected giro_bcd[ 6 ]
initial
begin
	giro_bcd_expected[6] = 1'bX;
end 
// expected giro_bcd[ 5 ]
initial
begin
	giro_bcd_expected[5] = 1'bX;
end 
// expected giro_bcd[ 4 ]
initial
begin
	giro_bcd_expected[4] = 1'bX;
end 
// expected giro_bcd[ 3 ]
initial
begin
	giro_bcd_expected[3] = 1'bX;
end 
// expected giro_bcd[ 2 ]
initial
begin
	giro_bcd_expected[2] = 1'bX;
end 
// expected giro_bcd[ 1 ]
initial
begin
	giro_bcd_expected[1] = 1'bX;
end 
// expected giro_bcd[ 0 ]
initial
begin
	giro_bcd_expected[0] = 1'bX;
end 

// expected llenado
initial
begin
	llenado_expected = 1'bX;
end 
// expected tiempo_faltante1[ 6 ]
initial
begin
	tiempo_faltante1_expected[6] = 1'bX;
end 
// expected tiempo_faltante1[ 5 ]
initial
begin
	tiempo_faltante1_expected[5] = 1'bX;
end 
// expected tiempo_faltante1[ 4 ]
initial
begin
	tiempo_faltante1_expected[4] = 1'bX;
end 
// expected tiempo_faltante1[ 3 ]
initial
begin
	tiempo_faltante1_expected[3] = 1'bX;
end 
// expected tiempo_faltante1[ 2 ]
initial
begin
	tiempo_faltante1_expected[2] = 1'bX;
end 
// expected tiempo_faltante1[ 1 ]
initial
begin
	tiempo_faltante1_expected[1] = 1'bX;
end 
// expected tiempo_faltante1[ 0 ]
initial
begin
	tiempo_faltante1_expected[0] = 1'bX;
end 
// expected tiempo_faltante2[ 6 ]
initial
begin
	tiempo_faltante2_expected[6] = 1'bX;
end 
// expected tiempo_faltante2[ 5 ]
initial
begin
	tiempo_faltante2_expected[5] = 1'bX;
end 
// expected tiempo_faltante2[ 4 ]
initial
begin
	tiempo_faltante2_expected[4] = 1'bX;
end 
// expected tiempo_faltante2[ 3 ]
initial
begin
	tiempo_faltante2_expected[3] = 1'bX;
end 
// expected tiempo_faltante2[ 2 ]
initial
begin
	tiempo_faltante2_expected[2] = 1'bX;
end 
// expected tiempo_faltante2[ 1 ]
initial
begin
	tiempo_faltante2_expected[1] = 1'bX;
end 
// expected tiempo_faltante2[ 0 ]
initial
begin
	tiempo_faltante2_expected[0] = 1'bX;
end 

// expected vaciado
initial
begin
	vaciado_expected = 1'bX;
end 
// expected velocidad_bcd[ 6 ]
initial
begin
	velocidad_bcd_expected[6] = 1'bX;
end 
// expected velocidad_bcd[ 5 ]
initial
begin
	velocidad_bcd_expected[5] = 1'bX;
end 
// expected velocidad_bcd[ 4 ]
initial
begin
	velocidad_bcd_expected[4] = 1'bX;
end 
// expected velocidad_bcd[ 3 ]
initial
begin
	velocidad_bcd_expected[3] = 1'bX;
end 
// expected velocidad_bcd[ 2 ]
initial
begin
	velocidad_bcd_expected[2] = 1'bX;
end 
// expected velocidad_bcd[ 1 ]
initial
begin
	velocidad_bcd_expected[1] = 1'bX;
end 
// expected velocidad_bcd[ 0 ]
initial
begin
	velocidad_bcd_expected[0] = 1'bX;
end 
// generate trigger
always @(alarma_expected or alarma or giro_bcd_expected or giro_bcd or llenado_expected or llenado or tiempo_faltante1_expected or tiempo_faltante1 or tiempo_faltante2_expected or tiempo_faltante2 or vaciado_expected or vaciado or velocidad_bcd_expected or velocidad_bcd)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected alarma = %b | expected giro_bcd = %b | expected llenado = %b | expected tiempo_faltante1 = %b | expected tiempo_faltante2 = %b | expected vaciado = %b | expected velocidad_bcd = %b | ",alarma_expected_prev,giro_bcd_expected_prev,llenado_expected_prev,tiempo_faltante1_expected_prev,tiempo_faltante2_expected_prev,vaciado_expected_prev,velocidad_bcd_expected_prev);
	$display("| real alarma = %b | real giro_bcd = %b | real llenado = %b | real tiempo_faltante1 = %b | real tiempo_faltante2 = %b | real vaciado = %b | real velocidad_bcd = %b | ",alarma_prev,giro_bcd_prev,llenado_prev,tiempo_faltante1_prev,tiempo_faltante2_prev,vaciado_prev,velocidad_bcd_prev);
`endif
	if (
		( alarma_expected_prev !== 1'bx ) && ( alarma_prev !== alarma_expected_prev )
		&& ((alarma_expected_prev !== last_alarma_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alarma :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alarma_expected_prev);
		$display ("     Real value = %b", alarma_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alarma_exp = alarma_expected_prev;
	end
	if (
		( giro_bcd_expected_prev[0] !== 1'bx ) && ( giro_bcd_prev[0] !== giro_bcd_expected_prev[0] )
		&& ((giro_bcd_expected_prev[0] !== last_giro_bcd_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port giro_bcd[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", giro_bcd_expected_prev);
		$display ("     Real value = %b", giro_bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_giro_bcd_exp[0] = giro_bcd_expected_prev[0];
	end
	if (
		( giro_bcd_expected_prev[1] !== 1'bx ) && ( giro_bcd_prev[1] !== giro_bcd_expected_prev[1] )
		&& ((giro_bcd_expected_prev[1] !== last_giro_bcd_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port giro_bcd[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", giro_bcd_expected_prev);
		$display ("     Real value = %b", giro_bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_giro_bcd_exp[1] = giro_bcd_expected_prev[1];
	end
	if (
		( giro_bcd_expected_prev[2] !== 1'bx ) && ( giro_bcd_prev[2] !== giro_bcd_expected_prev[2] )
		&& ((giro_bcd_expected_prev[2] !== last_giro_bcd_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port giro_bcd[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", giro_bcd_expected_prev);
		$display ("     Real value = %b", giro_bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_giro_bcd_exp[2] = giro_bcd_expected_prev[2];
	end
	if (
		( giro_bcd_expected_prev[3] !== 1'bx ) && ( giro_bcd_prev[3] !== giro_bcd_expected_prev[3] )
		&& ((giro_bcd_expected_prev[3] !== last_giro_bcd_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port giro_bcd[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", giro_bcd_expected_prev);
		$display ("     Real value = %b", giro_bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_giro_bcd_exp[3] = giro_bcd_expected_prev[3];
	end
	if (
		( giro_bcd_expected_prev[4] !== 1'bx ) && ( giro_bcd_prev[4] !== giro_bcd_expected_prev[4] )
		&& ((giro_bcd_expected_prev[4] !== last_giro_bcd_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port giro_bcd[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", giro_bcd_expected_prev);
		$display ("     Real value = %b", giro_bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_giro_bcd_exp[4] = giro_bcd_expected_prev[4];
	end
	if (
		( giro_bcd_expected_prev[5] !== 1'bx ) && ( giro_bcd_prev[5] !== giro_bcd_expected_prev[5] )
		&& ((giro_bcd_expected_prev[5] !== last_giro_bcd_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port giro_bcd[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", giro_bcd_expected_prev);
		$display ("     Real value = %b", giro_bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_giro_bcd_exp[5] = giro_bcd_expected_prev[5];
	end
	if (
		( giro_bcd_expected_prev[6] !== 1'bx ) && ( giro_bcd_prev[6] !== giro_bcd_expected_prev[6] )
		&& ((giro_bcd_expected_prev[6] !== last_giro_bcd_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port giro_bcd[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", giro_bcd_expected_prev);
		$display ("     Real value = %b", giro_bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_giro_bcd_exp[6] = giro_bcd_expected_prev[6];
	end
	if (
		( llenado_expected_prev !== 1'bx ) && ( llenado_prev !== llenado_expected_prev )
		&& ((llenado_expected_prev !== last_llenado_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port llenado :: @time = %t",  $realtime);
		$display ("     Expected value = %b", llenado_expected_prev);
		$display ("     Real value = %b", llenado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_llenado_exp = llenado_expected_prev;
	end
	if (
		( tiempo_faltante1_expected_prev[0] !== 1'bx ) && ( tiempo_faltante1_prev[0] !== tiempo_faltante1_expected_prev[0] )
		&& ((tiempo_faltante1_expected_prev[0] !== last_tiempo_faltante1_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tiempo_faltante1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tiempo_faltante1_expected_prev);
		$display ("     Real value = %b", tiempo_faltante1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_tiempo_faltante1_exp[0] = tiempo_faltante1_expected_prev[0];
	end
	if (
		( tiempo_faltante1_expected_prev[1] !== 1'bx ) && ( tiempo_faltante1_prev[1] !== tiempo_faltante1_expected_prev[1] )
		&& ((tiempo_faltante1_expected_prev[1] !== last_tiempo_faltante1_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tiempo_faltante1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tiempo_faltante1_expected_prev);
		$display ("     Real value = %b", tiempo_faltante1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_tiempo_faltante1_exp[1] = tiempo_faltante1_expected_prev[1];
	end
	if (
		( tiempo_faltante1_expected_prev[2] !== 1'bx ) && ( tiempo_faltante1_prev[2] !== tiempo_faltante1_expected_prev[2] )
		&& ((tiempo_faltante1_expected_prev[2] !== last_tiempo_faltante1_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tiempo_faltante1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tiempo_faltante1_expected_prev);
		$display ("     Real value = %b", tiempo_faltante1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_tiempo_faltante1_exp[2] = tiempo_faltante1_expected_prev[2];
	end
	if (
		( tiempo_faltante1_expected_prev[3] !== 1'bx ) && ( tiempo_faltante1_prev[3] !== tiempo_faltante1_expected_prev[3] )
		&& ((tiempo_faltante1_expected_prev[3] !== last_tiempo_faltante1_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tiempo_faltante1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tiempo_faltante1_expected_prev);
		$display ("     Real value = %b", tiempo_faltante1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_tiempo_faltante1_exp[3] = tiempo_faltante1_expected_prev[3];
	end
	if (
		( tiempo_faltante1_expected_prev[4] !== 1'bx ) && ( tiempo_faltante1_prev[4] !== tiempo_faltante1_expected_prev[4] )
		&& ((tiempo_faltante1_expected_prev[4] !== last_tiempo_faltante1_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tiempo_faltante1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tiempo_faltante1_expected_prev);
		$display ("     Real value = %b", tiempo_faltante1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_tiempo_faltante1_exp[4] = tiempo_faltante1_expected_prev[4];
	end
	if (
		( tiempo_faltante1_expected_prev[5] !== 1'bx ) && ( tiempo_faltante1_prev[5] !== tiempo_faltante1_expected_prev[5] )
		&& ((tiempo_faltante1_expected_prev[5] !== last_tiempo_faltante1_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tiempo_faltante1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tiempo_faltante1_expected_prev);
		$display ("     Real value = %b", tiempo_faltante1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_tiempo_faltante1_exp[5] = tiempo_faltante1_expected_prev[5];
	end
	if (
		( tiempo_faltante1_expected_prev[6] !== 1'bx ) && ( tiempo_faltante1_prev[6] !== tiempo_faltante1_expected_prev[6] )
		&& ((tiempo_faltante1_expected_prev[6] !== last_tiempo_faltante1_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tiempo_faltante1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tiempo_faltante1_expected_prev);
		$display ("     Real value = %b", tiempo_faltante1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_tiempo_faltante1_exp[6] = tiempo_faltante1_expected_prev[6];
	end
	if (
		( tiempo_faltante2_expected_prev[0] !== 1'bx ) && ( tiempo_faltante2_prev[0] !== tiempo_faltante2_expected_prev[0] )
		&& ((tiempo_faltante2_expected_prev[0] !== last_tiempo_faltante2_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tiempo_faltante2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tiempo_faltante2_expected_prev);
		$display ("     Real value = %b", tiempo_faltante2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_tiempo_faltante2_exp[0] = tiempo_faltante2_expected_prev[0];
	end
	if (
		( tiempo_faltante2_expected_prev[1] !== 1'bx ) && ( tiempo_faltante2_prev[1] !== tiempo_faltante2_expected_prev[1] )
		&& ((tiempo_faltante2_expected_prev[1] !== last_tiempo_faltante2_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tiempo_faltante2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tiempo_faltante2_expected_prev);
		$display ("     Real value = %b", tiempo_faltante2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_tiempo_faltante2_exp[1] = tiempo_faltante2_expected_prev[1];
	end
	if (
		( tiempo_faltante2_expected_prev[2] !== 1'bx ) && ( tiempo_faltante2_prev[2] !== tiempo_faltante2_expected_prev[2] )
		&& ((tiempo_faltante2_expected_prev[2] !== last_tiempo_faltante2_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tiempo_faltante2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tiempo_faltante2_expected_prev);
		$display ("     Real value = %b", tiempo_faltante2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_tiempo_faltante2_exp[2] = tiempo_faltante2_expected_prev[2];
	end
	if (
		( tiempo_faltante2_expected_prev[3] !== 1'bx ) && ( tiempo_faltante2_prev[3] !== tiempo_faltante2_expected_prev[3] )
		&& ((tiempo_faltante2_expected_prev[3] !== last_tiempo_faltante2_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tiempo_faltante2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tiempo_faltante2_expected_prev);
		$display ("     Real value = %b", tiempo_faltante2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_tiempo_faltante2_exp[3] = tiempo_faltante2_expected_prev[3];
	end
	if (
		( tiempo_faltante2_expected_prev[4] !== 1'bx ) && ( tiempo_faltante2_prev[4] !== tiempo_faltante2_expected_prev[4] )
		&& ((tiempo_faltante2_expected_prev[4] !== last_tiempo_faltante2_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tiempo_faltante2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tiempo_faltante2_expected_prev);
		$display ("     Real value = %b", tiempo_faltante2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_tiempo_faltante2_exp[4] = tiempo_faltante2_expected_prev[4];
	end
	if (
		( tiempo_faltante2_expected_prev[5] !== 1'bx ) && ( tiempo_faltante2_prev[5] !== tiempo_faltante2_expected_prev[5] )
		&& ((tiempo_faltante2_expected_prev[5] !== last_tiempo_faltante2_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tiempo_faltante2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tiempo_faltante2_expected_prev);
		$display ("     Real value = %b", tiempo_faltante2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_tiempo_faltante2_exp[5] = tiempo_faltante2_expected_prev[5];
	end
	if (
		( tiempo_faltante2_expected_prev[6] !== 1'bx ) && ( tiempo_faltante2_prev[6] !== tiempo_faltante2_expected_prev[6] )
		&& ((tiempo_faltante2_expected_prev[6] !== last_tiempo_faltante2_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tiempo_faltante2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tiempo_faltante2_expected_prev);
		$display ("     Real value = %b", tiempo_faltante2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_tiempo_faltante2_exp[6] = tiempo_faltante2_expected_prev[6];
	end
	if (
		( vaciado_expected_prev !== 1'bx ) && ( vaciado_prev !== vaciado_expected_prev )
		&& ((vaciado_expected_prev !== last_vaciado_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vaciado :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vaciado_expected_prev);
		$display ("     Real value = %b", vaciado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_vaciado_exp = vaciado_expected_prev;
	end
	if (
		( velocidad_bcd_expected_prev[0] !== 1'bx ) && ( velocidad_bcd_prev[0] !== velocidad_bcd_expected_prev[0] )
		&& ((velocidad_bcd_expected_prev[0] !== last_velocidad_bcd_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port velocidad_bcd[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", velocidad_bcd_expected_prev);
		$display ("     Real value = %b", velocidad_bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_velocidad_bcd_exp[0] = velocidad_bcd_expected_prev[0];
	end
	if (
		( velocidad_bcd_expected_prev[1] !== 1'bx ) && ( velocidad_bcd_prev[1] !== velocidad_bcd_expected_prev[1] )
		&& ((velocidad_bcd_expected_prev[1] !== last_velocidad_bcd_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port velocidad_bcd[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", velocidad_bcd_expected_prev);
		$display ("     Real value = %b", velocidad_bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_velocidad_bcd_exp[1] = velocidad_bcd_expected_prev[1];
	end
	if (
		( velocidad_bcd_expected_prev[2] !== 1'bx ) && ( velocidad_bcd_prev[2] !== velocidad_bcd_expected_prev[2] )
		&& ((velocidad_bcd_expected_prev[2] !== last_velocidad_bcd_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port velocidad_bcd[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", velocidad_bcd_expected_prev);
		$display ("     Real value = %b", velocidad_bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_velocidad_bcd_exp[2] = velocidad_bcd_expected_prev[2];
	end
	if (
		( velocidad_bcd_expected_prev[3] !== 1'bx ) && ( velocidad_bcd_prev[3] !== velocidad_bcd_expected_prev[3] )
		&& ((velocidad_bcd_expected_prev[3] !== last_velocidad_bcd_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port velocidad_bcd[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", velocidad_bcd_expected_prev);
		$display ("     Real value = %b", velocidad_bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_velocidad_bcd_exp[3] = velocidad_bcd_expected_prev[3];
	end
	if (
		( velocidad_bcd_expected_prev[4] !== 1'bx ) && ( velocidad_bcd_prev[4] !== velocidad_bcd_expected_prev[4] )
		&& ((velocidad_bcd_expected_prev[4] !== last_velocidad_bcd_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port velocidad_bcd[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", velocidad_bcd_expected_prev);
		$display ("     Real value = %b", velocidad_bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_velocidad_bcd_exp[4] = velocidad_bcd_expected_prev[4];
	end
	if (
		( velocidad_bcd_expected_prev[5] !== 1'bx ) && ( velocidad_bcd_prev[5] !== velocidad_bcd_expected_prev[5] )
		&& ((velocidad_bcd_expected_prev[5] !== last_velocidad_bcd_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port velocidad_bcd[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", velocidad_bcd_expected_prev);
		$display ("     Real value = %b", velocidad_bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_velocidad_bcd_exp[5] = velocidad_bcd_expected_prev[5];
	end
	if (
		( velocidad_bcd_expected_prev[6] !== 1'bx ) && ( velocidad_bcd_prev[6] !== velocidad_bcd_expected_prev[6] )
		&& ((velocidad_bcd_expected_prev[6] !== last_velocidad_bcd_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port velocidad_bcd[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", velocidad_bcd_expected_prev);
		$display ("     Real value = %b", velocidad_bcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_velocidad_bcd_exp[6] = velocidad_bcd_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module lavadora_vlg_vec_tst();
// constants                                           
// general purpose registers
reg cerrado;
reg encendida;
reg lleno;
reg reloj;
reg reset;
// wires                                               
wire alarma;
wire [6:0] giro_bcd;
wire llenado;
wire [6:0] tiempo_faltante1;
wire [6:0] tiempo_faltante2;
wire vaciado;
wire [6:0] velocidad_bcd;

wire sampler;                             

// assign statements (if any)                          
lavadora i1 (
// port map - connection between master ports and signals/registers   
	.alarma(alarma),
	.cerrado(cerrado),
	.encendida(encendida),
	.giro_bcd(giro_bcd),
	.llenado(llenado),
	.lleno(lleno),
	.reloj(reloj),
	.reset(reset),
	.tiempo_faltante1(tiempo_faltante1),
	.tiempo_faltante2(tiempo_faltante2),
	.vaciado(vaciado),
	.velocidad_bcd(velocidad_bcd)
);

// cerrado
initial
begin
	cerrado = 1'b0;
	cerrado = #10000 1'b1;
	cerrado = #660000 1'b0;
end 

// encendida
initial
begin
	encendida = 1'b0;
	encendida = #10000 1'b1;
	encendida = #650000 1'b0;
end 

// lleno
initial
begin
	lleno = 1'b0;
	lleno = #10000 1'b1;
	lleno = #670000 1'b0;
end 

// reloj
initial
begin
	reloj = 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 

lavadora_vlg_sample_tst tb_sample (
	.cerrado(cerrado),
	.encendida(encendida),
	.lleno(lleno),
	.reloj(reloj),
	.reset(reset),
	.sampler_tx(sampler)
);

lavadora_vlg_check_tst tb_out(
	.alarma(alarma),
	.giro_bcd(giro_bcd),
	.llenado(llenado),
	.tiempo_faltante1(tiempo_faltante1),
	.tiempo_faltante2(tiempo_faltante2),
	.vaciado(vaciado),
	.velocidad_bcd(velocidad_bcd),
	.sampler_rx(sampler)
);
endmodule

